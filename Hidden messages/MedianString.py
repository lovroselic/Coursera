# -*- coding: utf-8 -*-
"""
Created on Fri Aug 28 09:07:29 2020

@author: SELICLO1
"""

def NumberToPattern(x, K):
    MAP = ['A', 'C', 'G', 'T']
    pat = []
    while K > 0: 
        R = x % 4
        x = x // 4
        pat.insert(0, MAP[R])
        K -= 1
    return "".join(pat)

def HammingDistance(a,b):
    mm = 0
    for i,s in enumerate(a):
        if s != b[i]: mm+= 1
    return mm

def Kmerize(text, k):
    return [text[i:i+k] for i in range(0, len(text) - k + 1)]

def DistanceBetweenPatternAndStrings(Pattern, Dna):
    k = len(Pattern)
    distance = 0
    for Text in Dna:
        HD = float("inf")
        for kmer in Kmerize(Text, k):
            cur_hd = HammingDistance(Pattern, kmer)
            if HD > cur_hd:
                HD = cur_hd
        distance += HD
    return distance

def MedianString(Dna,k):
    distance = float("inf")
    for i in range(4**k):
        Pattern = NumberToPattern(i, k)
        #print(Pattern)
        cur_dist = DistanceBetweenPatternAndStrings(Pattern, Dna)
        if distance > cur_dist:
            distance = cur_dist
            Median = Pattern
    return Median

Dna = ['CTCGATGAGTAGGAAAGTAGTTTCACTGGGCGAACCACCCCGGCGCTAATCCTAGTGCCC', 
       'GCAATCCTACCCGAGGCCACATATCAGTAGGAACTAGAACCACCACGGGTGGCTAGTTTC', 
       'GGTGTTGAACCACGGGGTTAGTTTCATCTATTGTAGGAATCGGCTTCAAATCCTACACAG']
k = 7
#Dna = ['GCGGCTCCTCGGAGTCAGTACGGAGAGACGCCGACAATCTTTAGTCACTCCGGGATGACTATGAAGCGCTGAGACTGTATTCCAAACTCTTATCGACGTTTGAAAG', 'AGTGCGCTCAGCCCTCAACCCAACCACAACTGAGTTGCGAAGTATTACACTCATCATTCTGGTAGAGTACATAATAACCACAATAGAGAGACAACGTCTATGTAAG', 'ACGCCTATTCCATACGAGTGAAAGGCATAATGATCAGGAAGATGAGCGAGAACTTCTCGCTAACCGTAAGGTCCATAACGTACGTCGGGCGATAGTTAGCCGATAG', 'TCAAGAACATCACGCAATATGCGGAGAGATTAAGCGTTAAGGATCTAGTAAGGGTAAAGGAGAAGGGACGGCCCTACGTCCGTAGCTTGTCCCTACTTCAGTAATA', 'TAGAAGTACCGTTTCGTAAATTTAGTCCATAGTTGGTCTTGAGCAGACCTGCATTAGGATCAAGCCCTCGCCAGATCGCAAAATTAGTACGCGGGTGGCCACCAGA', 'TCGCACGATCTTTGAAGCTGTGTCGTATGGACGCACACCCGTGGTCTCATAAAGGTTCACAATACGTGAAAATGCATCGTATCGGCCAGGACTTGGACGGGCTAAT', 'TCCGTCCCCGAATACGGTATACGATGATCTTGCCTCCACTATTTCCTTCCAAGAGCTTTACGCCTCCACAGAGCGGAATGAAACTAGTCTCGCACTGTACCCCTTC', 'CAACGTGCGAGTGATAACAGTGTTTCAGCTAGGTCCGACCCGGGCAGTGGACAGACTCTTATCACCTTGAGGAGTCGTCGTTCAATAGTGCAGGACGAGCGTCTGA', 'TGCAGCGTGTAGGTTTGATTTTCTTTAGAAGGCGCAAGTAGCAACTAGTGGTGGCAGTGTAGCGTGCAAGAGCAACATCAATAATTGCCAATTTACTCATTCCTAC', 'CCCGGGCGGGCATTGACGCTCCGGCGGACAACGATCTTGTGGAATACTGTCAGAACTGGAGCCCTAGCGAAGCCACGCACCACGTCGTCCTGTAAGAATATGCGGA', 'CATGACGGTCGCTGCAGACACTCCAATTAATCCGCTCTTGTCCTCTCGAGTGGAAAATGTTATTCATGCTATTCTAGCGACCCGACGTGTGACATCTCTTGTAAAT', 'AGCTAGCATAATTGGCGATTAGCGGGGGTGTGATCCTAGGAACGCTGCTTACTCGCCAGTAGTCTCATCAAGATGTATCTGTCATCTAGCCTAAGTGCCAATAAGG', 'GATAGTAGTCTGGCCACTTCTGCCAGCCTCTAGTTTATGATTGATTTGATCCCTAGCTGCGTTACATTGATACCTGGTTGTACGTTTTTCCACTAATGGGTATCGA', 'ACCGGGGGGGCTGTGAGCACCTTGACATTCATTAACAACTTTATCGTAAACTAGTCCTATGTACCGTGCTAAGCCGCCTAAAATGGTCAGGCTCAAATAAATGGTT', 'TACCGGCTCCCTCTGGACTATTGGGTTGATGTCCGGGTCGCCCCTGTTACTGATGTGCGATGGTACTGACTCTGTGGCGATACCAGGGAATCACATAGACTATGCT', 'GCTGATAAGATTGACGGAAACGAGCGTTTGCGAGTACGTATCGAGTACGTGGGTCCGGTATTCGGTATGATGTCCTACTAACATGAGAAGCACATCTCCTCTACAA', 'CTATCTTGACCTGTTATAGGGCCGGGGGGATGGCGAAAGGTGTCTGTTCGGAGCCTAAGTGGACAAACCTCCCCTGTAGGAGTTTAGCCAATGGTCAAATGTCGTA', 'GTCGGCCACGAACCCATGGCCCTTCGTCGCCCGCTGTGCGGTCCTAAGATTCAGTGCTCCGCAGGTAATTTGGGACATGGAGCCCTTATGTTTGTATTGGATATTC', 'ACTCCACCTTAACTGAGGTAGCCCCGCAACGCGTTCTCCTAGTACTCGGTAAAAAAAAACTGACGGCTCAAACTTATGTAAAGCAGGTCGTGGATTCCACCTGTCA', 'GGGAACGTTGGCCTGCTGATAGTTGGTTGTAACACCTGCATAGTTCCTCGGGTCAGACCTGTGGGATTACTTTGCGCACATTACGGCGGTAATGGGTGGTAGGAAA', 'TGAAAGACCGAGGGTGTGGGTAATGGCTCGATCTAGGGGGAACTATCAGTTTAAGACTATGGGACCGCGGCTGTACTATTGTGTCCGCTTCTGACATGGCTAAGAA', 'ACAGGCTCGGCACGCTAGAGTGCTTGCAAAGACTCCTCTTAAACACCTCATTCGATTACTTCTGTGATTCTTGACTTACTACTCTTCACGGGATCTGCCGTTCCAC', 'GAAAGATCTTTTGTGTCGTGACTTTATGCGGAACCTAAACACAACGACTTTTGCGGTTAGTATGACTAGTGTCCCCCTGGGAGTAGGGACGAAAGTTTACCGAGAT', 'AAAAGTTCTATTCTTCTCAGCGTTGCATAACCCTTTTATACCATGGAAATTCACCCCGACTTTTGCTACCATTTCAAACTGAGCAGTCTCAGAATTATGGAGGAGT', 'CGCACGCTATGTAATGTCCCCGAGTATGGTATGTATTAGTAGGGTATAGTTTAGAACCGCGATACACACCGTAGTCTAGGCTGCACAGCGCATACCGGGCTTCCAA', 'CCTCCAGGAAGGCACCTGATACCTGGCTACAATTGTAAACCTGCTCATTGTTTAAATCTACTCGTGGGTTTATCCATCGAAAGCCCGACATCGTTGTGTGGCCTTG', 'GTTACTCCGGCTTCGGTTAATCCAAGATAGTTGAACTGAATGCGATATTCAAGTATTTGGAAACCCTCATGCTTTCATGGGAATTAGTGTCTAGTGAAAACGCCCT', 'GACGCATAAACTGTATCTACGGGGCGAGTGGTTATAAACTACTTGTAGTTGGAGGGCCTGGCGGTGCCCGGCTTAGCTCATCCAGTGGAGGCATGCATTGAGCACC', 'TGACTCCGTATACAAGTCTGCTCGCTAGTTGGCAGCACGGCAGTGAGTGTTCTGGGTATGTACTGGATCGTTACGCTAGCAGGTGGCTCCCGTGTCCTGTTTATAA', 'GGCTGATTCGGGGGGCGGCTAGATTTACTTAGATTGACGCCAAACCTCAGAGCGCTTGAAGACGTTCTCCATTATGCGCACACAAGCAGAGTCTCCGGGCCCTGAG', 'ATTGTACCACGAGAGGAGCGGGTCAATTCCGTAGGTAATTGCTCGTGAAGGCCACGCGCTGTGCGCGCATTAGGTGTTATACAATAGCGCAGCTTGTCGTATGTGC', 'TGGACTGGGGGACCTTAATGATCCGAATTGGACCCGATATATTTCGGGTAAAAGGCATGCGTAAGGAAGTGACAGTCGGCAGACGGTAGGCACTGGTTTGATGTGT', 'CCAATGTTGCGGGCCAATTACTTTATTGTGGTGTATGTTAAATAAATAGATTTCATACCATATTTCGTGCGTAAACCGCCGGAAAAGGTCGGAAACCGCAAAAAAC', 'CTTACCCTCTGAAGATGACACCTCACTTCTTTTCCGAGGTATCCAGTGGGACAGGTATTGCAGAACTTCAGTAAGGATCGCCGACGCTAGATACATCAACCCTAAA', 'CGAGAGGCCTATTCCTTATATAAGCAATGTCTATTTCCGTACCATTTTATCGACGACTCGAACCCATTTACTGGGGAAGGCAGGGTCCGTGTATTTAAGTTAGTTT', 'AAGATTCCGACATTTAGCGGCGCTGAACTAGATGAAACCGGTAGTATGTGCCACCCTGGATTGATCACGGGACATTTTCCGGCCTGACCTGCGGGTTCTTGGCCAG', 'CGGAAGCAATTCATAGAGAAAGTGTGCGAACGGGTACCTGACCTCTGAGTAAAAGCCACTAATCGGTGTCTCTCTGAGCTAAAGGGGGTCTTGGAATCTCTATCTA', 'ACGGCTAGTTCCGGTAGACCTCCAGCTCGACCATAGCCGGTGGAGCGCTCTATCCGGACTTAATCTGCTTGTTTGGCAAGATTAGGTGGCCCACTTACAGCTAAGA']
#Pattern = 'CCGGCAG'
#dist = DistanceBetweenPatternAndStrings(Pattern, Dna)
#print(dist)

ms = MedianString(Dna,k)
print(ms)